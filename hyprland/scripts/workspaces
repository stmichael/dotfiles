#!/bin/sh

set_workspace_layout() {
  local mode=$1
  if [[ $mode = "single" ]]; then
    set_single_monitor_layout
  elif [[ $mode = "dual" ]]; then
    set_dual_monitor_layout
  elif [[ $mode = "presentation" ]]; then
    set_presentation_layout
  fi
}

set_single_monitor_layout() {
  local monitorId=$(get_laptop_monitor_id)
  echo "Moving all workspaces to monitor $monitorId"
  move_workspace_to_monitor 1 $monitorId
  move_workspace_to_monitor 2 $monitorId
  move_workspace_to_monitor 3 $monitorId
  move_workspace_to_monitor 4 $monitorId
  move_workspace_to_monitor 5 $monitorId
}

set_dual_monitor_layout() {
  local laptopMonitorId=$(get_laptop_monitor_id)
  local externalMonitorId=$(get_external_monitor_id)

  echo "Moving workspace 1 to monitor $laptopMonitorId"
  move_workspace_to_monitor 1 $laptopMonitorId

  echo "Moving other workspaces to monitor $externalMonitorId"
  move_workspace_to_monitor 2 $externalMonitorId
  move_workspace_to_monitor 3 $externalMonitorId
  move_workspace_to_monitor 4 $externalMonitorId
  move_workspace_to_monitor 5 $externalMonitorId
}

set_presentation_layout() {
  local laptopMonitorId=$(get_laptop_monitor_id)
  local externalMonitorId=$(get_external_monitor_id)

  echo "Moving workspaces 1-4 to monitor $laptopMonitorId"
  move_workspace_to_monitor 1 $laptopMonitorId
  move_workspace_to_monitor 2 $laptopMonitorId
  move_workspace_to_monitor 3 $laptopMonitorId
  move_workspace_to_monitor 4 $laptopMonitorId

  echo "Moving workspace 5 to monitor $externalMonitorId"
  move_workspace_to_monitor 5 $externalMonitorId
}

move_workspace_to_monitor() {
  local workspace=$1
  local monitor=$2

  if [[ $DRY_RUN -eq 1 ]]
  then
    echo "-> hyprctl dispatch moveworkspacetomonitor $workspace $monitor"
    echo "-> hyprctl keyword workspace $workspace, $monitor"
  else
    hyprctl dispatch moveworkspacetomonitor $workspace $monitor > /dev/null
    hyprctl keyword workspace $workspace, $monitor > /dev/null
  fi
}

get_laptop_monitor_id() {
  hyprctl monitors -j | jq 'map(select(.name=="eDP-1")) | first | .id'
}

get_external_monitor_id() {
  hyprctl monitors -j | jq 'map(select(.name!="eDP-1")) | first | .id'
}

listen_to_monitor_change() {
  # Update the monitors initially
  handle_monitor_change

  socat -U - UNIX-CONNECT:$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock | while read -r line
  do
    echo $line
    handle_event "$line"
  done
}

handle_event() {
  # Possible events:
  # monitoraddedv2>>1,DP-3,BNQ BenQ PD2710QC RAJ0256801Q
  # monitorremoved>>DP-3
  case $1 in
    monitoraddedv2*) handle_monitor_change ;;
    monitorremoved*) handle_monitor_change ;;
  esac
}

handle_monitor_change() {
  local monitorCount=$(hyprctl monitors -j | jq '. | length')
  if [[ $monitorCount -eq 1 ]]
  then
    setup_single_monitor_layout
  elif [[ $monitorCount -eq 2 ]]
  then
    setup_two_monitor_layout
  else
    setup_two_monitor_layout
  fi
}

usage() {
    echo "Usage: $0 --set MODE [--dry-run]"
    echo "Adjust workspaces to the monitor layout."
    echo ""
    echo "Options:"
    echo " -h, --help   This help"
    echo " --dry-run    Doesn't perform any workspace rearrangements, only prints what it would do"
    echo " --set [MODE] Distributes the workspaces according to MODE."
    echo ""
    echo "MODE can be any of:"
    echo " single: moves all workspaces to the first (and only) monitor"
    echo " dual: moves the first workspace to the laptops monitor"
    echo "       and the other workspaces to the external monitor."
    echo " presentation: moves the first four workspaces to the laptop monitor"
    echo "               and the fifth workspaces to the external monitor."
    exit 1
}

DRY_RUN=0
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      shift
      ;;
    --set)
      ACTION="set"
      shift
      MODE=$1
      shift
      ;;
    --dry-run)
      DRY_RUN=1
      shift
      ;;
  esac
done

if [[ $ACTION = "set" ]]
then
  set_workspace_layout $MODE
else
  echo "Don't know what to do"
  exit 1
fi
